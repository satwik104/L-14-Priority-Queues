#include <vector>
class PriorityQueue {
    vector<int> pq;
   public:
    PriorityQueue() {
        
    }

    /**************** Implement all the public functions here ***************/

    void insert(int element) {
        pq.push_back(element);
        int childIndex = pq.size()-1;
        int parentIndex = (childIndex -1)/2;
        while(childIndex > 0)//so that we can shift it till top if it is largest
        {
            if(pq[childIndex] < pq[parentIndex])
                break;
            //else we swap 
            else if(pq[childIndex] > pq[parentIndex])
            {
                int temp = pq[parentIndex];
                pq[parentIndex] = pq[childIndex];
                pq[childIndex] = temp;
            }
            //update the values
            childIndex = parentIndex;
            parentIndex = (childIndex -1)/2;
        }
    }

    int getMax() {
        if(pq.size()==0)
            return 0;
        else
            return pq[0];
    }

    int removeMax() {
        int ans = pq[0];
        pq[0] = pq[pq.size()-1];
        pq.pop_back();
        int parentIndex = 0;
        int LCI = 2*parentIndex+1,RCI = 2*parentIndex+2;
        while(LCI < pq.size())//LCI SHOULD BHE IN RANGE
        {
           // if(pq[parentIndex] > pq[LCI] && pq[parentIndex] > pq[RCI])
              //  return ans;
            int maxIndex = parentIndex;//ned to maintain for swapping
            //now figure out max of all three pi,lci,rci
            if(pq[LCI] > pq[maxIndex])
                maxIndex = LCI;
            if(RCI < pq.size() && pq[RCI] > pq[maxIndex])
                maxIndex = RCI;
            if(maxIndex == parentIndex)
                break;
            //if last if did'nt run so we need to swap
            int temp = pq[parentIndex];
            pq[parentIndex] = pq[maxIndex];
            pq[maxIndex] = temp;
            
            //now we update the values for next checking
            parentIndex = maxIndex;
            LCI = 2*parentIndex+1;
            RCI = 2*parentIndex+2;
        }
        return ans;
    }

    int getSize() { 
        return pq.size();
    }

    bool isEmpty() {
        return pq.size()==0;
    }
};
